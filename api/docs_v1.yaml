openapi: 3.0.3
info:
  title: WISH - API v1
  description: |-
    Документация [WISH](https://shareu.ru/)
    

  #termsOfService: http://swagger.io/terms/
  contact:
    email: markzum@yandex.ru
  #license:
  #  name: Apache 2.0
  #  url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://api.shareu.ru/v1
  - url: https://api.shareu.ru/test/v1
tags:
  - name: auth
    description: Авторизация пользователя
  - name: stations
    description: Станции
  - name: orders
    description: Действия с заказами
  - name: profile
    description: Информация о пользователе
  - name: subscription
    description: Подписка
  - name: landing-forms
    description: Формы без авторизации
paths:
  /auth/start-phone-verification:
    post:
      tags:
        - auth
      summary: Начать проверку телефона
      description: Инициализировать flash-звонок для проверки телефона
      operationId: authStartPhoneVerification
      requestBody:
        # description: Init flash-call for phone verification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/startPhoneVerificationRequest'
        required: true
      responses:
        '200':
          description: Flash-звонок пользователю был начат
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'
  
  /auth/check-code:
    post:
      tags:
        - auth
      summary: Отправить проверочный код
      description: Если код верен, то пользователь будет создан (если еще не существует).
      operationId: authCheckCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authCheckCodeRequest'
        required: true
      responses:
        '200':
          description: Успешная проверка
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/authCheckCodeResponseVerified'
                  - $ref: '#/components/schemas/authCheckCodeResponseNotVerified'
              examples:
                success:
                  summary: Код подтвержден
                  value:
                    status: "ok"
                    is_verified: true
                    auth_token: "eyJhbGciOiJIUzI1NiIIInR5cCI6IkpXVCJ9.eyJpZCI6NywiZXhwIjoyMQM4NDIxMTY6fQ.oPmyN0ctSVWGZySvB5ZLfLeJr7maHvBlKY6XuaZBijw"
                error:
                  summary: Код не подтвержден
                  value:
                    status: "ok"
                    is_verified: false
                    reason: "timeout_exceeded"

  /auth/check:
    get:
      tags:
        - auth
      summary: Проверить авторизацию
      description: Проверить, авторизован ли пользователь. При положительном результате возвращает ID этого пользователя
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/checkAuthResponse'


  /stations/get-all-stations:
    get:
      tags:
        - stations
      summary: Получить все станции со всеми данными
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllStationsResponse'
  

  /orders/take-umbrella:
    post:
      tags:
        - orders
      summary: Взять зонт
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/takeUmbrellaRequest'
        required: true
      responses:
        '200':
          description: В ответ возвращается способ оплаты
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/takeUmbrellaResponseSuccess'
                  - $ref: '#/components/schemas/takeUmbrellaResponseError'
              examples:
                success:
                  summary: Депозит внесен автоматически / требуется ручная оплата
                  value:
                    status: "ok"
                    payment_mode: "auto"
                    deposit_amount: 149
                    user_id: 1234
                    station_id: 23
                error:
                  summary: Депозит не может быть взят
                  value:
                    status: "error"
                    message: "You have an active order"
  
  /orders/put-umbrella:
    post:
      tags:
        - orders
      summary: Вернуть зонт
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/takeUmbrellaRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/putUmbrellaResponseSuccess'
                  - $ref: '#/components/schemas/takeUmbrellaResponseError'
              examples:
                success:
                  summary: Ячейка для возврата зонта открыта
                  value:
                    status: "ok"
                    slot: 8
                    order_id: 25387
                error:
                  summary: Error
                  value:
                    status: "error"
                    message: "You have no active orders"

  /orders/get-order-status:
    get:
      tags:
        - orders
      summary: Получить текущий статус заказа
      description: Возвращает статус текущего заказа пользователя
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getOrderStatusResponseStationAction'
                  - $ref: '#/components/schemas/getOrderStatusResponseOtherActions'
              examples:
                success:
                  summary: Станция открыта
                  value:
                    status: "ok"
                    order_status: "station_opened_to_take"
                    slot: 8
                success2:
                  summary: Другие статусы
                  value:
                    status: "ok"
                    order_status: "closed_successfully"

  /orders/feedback:
    post:
      tags:
        - orders
      summary: Оставить отзыв
      description: Оставить отзыв о последнем заказе
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ordersFeedbackRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'

  /orders/get-active-order:
    get:
      tags:
        - orders
      summary: Получить активный заказ пользователя
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getActiveOrderResponse'
  
  /orders/get-processed-orders:
    get:
      tags:
        - orders
      summary: Получать все закрытые заказы пользователей
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProcessedOrdersResponse'


  /profile/get-user-info:
    get:
      tags:
        - profile
      summary: Получить информацию о пользователе
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserInfoResponse'

  /profile/update-user-info:
    post:
      tags:
        - profile
      summary: Обновить информацию о пользователе
      security: 
        - Bearer: []
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserInfoRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'


  /subscription/get-subscription-info:
    get:
      tags:
        - subscription
      summary: Получить информацию о подписке пользователя
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSubscriptionInfoResponse'

  /subscription/send-invitation:
    post:
      tags:
        - subscription
      summary: Отправить приглашение в семью
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscriptionSendInvitationToFamilyRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/standartOKSchema'
                  - $ref: '#/components/schemas/subscriptionSendInvitationToFamilyResponseError'
              examples:
                success:
                  summary: Приглашение отправлено
                error:
                  summary: Ошибка
                  value:
                    status: "error"
                    code: "user_not_found"
                    message: "User with this phone number does not exist"

  /subscription/get-subscription-invitations:
    get:
      tags:
        - subscription
      summary: Получить приглашения разных людей в конкретную подписку
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSubscriptionInvitationsResponse'
  
  /subscription/get-user-invitations:
    get:
      tags:
        - subscription
      summary: Получить приглашения текущего пользователя во все подписки
      security: 
        - Bearer: []
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserSubscriptionInvitationsResponse'

  /subscription/accept-invitation:
    post:
      tags:
        - subscription
      summary: Принять приглашение в семью
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscriptionAcceptInvitationToFamilyRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'
    
  /subscription/reject-invitation:
    post:
      tags:
        - subscription
      summary: Отклонить приглашение в семью
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscriptionAcceptInvitationToFamilyRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'
  
  /subscription/delete-invitation:
    post:
      tags:
        - subscription
      summary: Удалить приглашение в семью от владельца подписки
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscriptionAcceptInvitationToFamilyRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'


  /landing-forms/support:
    post:
      tags:
        - landing-forms
      summary: Отправить сообщение в службу поддержки
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/supportRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'
  
  /landing-forms/install-station-request:
    post:
      tags:
        - landing-forms
      summary: Запрос на установку станции
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/installStationRequest'
        required: true
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standartOKSchema'








components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    startPhoneVerificationRequest:
      required:
        - phone
      type: object
      properties:
        phone:
          type: string
          description: Можно использовать пробелы, тире и круглые скобки. Обязательно используйте +7
          example: '+7 (800) 555-35-35'
    
    standartOKSchema:
      type: object
      properties:
        status:
          type: string
          enum: ["ok"]
    
    authCheckCodeRequest:
      required:
        - phone
        - code
      type: object
      properties:
        phone:
          type: string
          description: Можно использовать пробелы, тире и круглые скобки. Обязательно используйте +7
          example: '+7 (800) 555-35-35'
        code:
          type: string
          example: '1234'
    
    authCheckCodeResponseVerified:
      type: object
      properties:
        status:
          type: string
          enum: ["ok"]
        is_verified:
          type: boolean
          enum: [true]
        auth_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIIInR5cCI6IkpXVCJ9.eyJpZCI6NywiZXhwIjoyMQM4NDIxMTY6fQ.oPmyN0ctSVWGZySvB5ZLfLeJr7maHvBlKY6XuaZBijw"

    authCheckCodeResponseNotVerified:
      type: object
      properties:
        status:
          type: string
          enum: ["ok"]
        is_verified:
          type: boolean
          enum: [false]
        reason:
          type: string
          enum:
            - "attempts_exceeded"
            - "timeout_exceeded"
            - null
    
    checkAuthResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["ok"]
        user_id:
          type: integer
          example: 123


    stationObject:
      type: object
      properties:
        id:
          type: integer
          example: 32
        title:
          type: string
          example: 'Какое-то кафе'
        address:
          type: string
          example: 'ул. Пушкина, д. Колотушкина'
        latitude:
          type: number
          example: 55.755863
        longitude:
          type: number
          example: 37.6177
        opening_hours:
          type: array
          items:
            type: object
            properties:
              mon:
                type: object
                description: может быть mon/tue/wed/thu/fri/sat/sun
                properties: 
                  start:
                    type: string
                    example: "9:00"
                  stop:
                    type: string
                    example: "21:00"
                  break_start:
                    type: string
                    example: "13:30"
                  break_stop:
                    type: string
                    example: "14:00"
              tue:
                type: object
                description: может быть mon/tue/wed/thu/fri/sat/sun
                properties: 
                  start:
                    type: string
                    example: "10:00"
                  stop:
                    type: string
                    example: "20:00"
              sun:
                type: string
                example: null
        capacity:
          description: Сколько зонтиков вообще может поместиться в станции
          type: integer
          example: 20
        can_put:
          description: Сколько зонтиков сейчас может поместиться в станции
          type: integer
          example: 6
        can_take:
          description: Сколько сейчас зонтиков в станции
          type: integer
          example: 14
        information:
          description: Дополнительная информация о том, как найти станцию
          type: string
          example: "Пойдите туда, не знаю куда"
        state:
          description: |-
            `0` - работает отлично \
            `1` - не работает
          type: integer
          example: 0
    
    getAllStationsResponse:
      type: array
      items:
        $ref: '#/components/schemas/stationObject'
    

    takeUmbrellaRequest:
      type: object
      properties: 
        station_id:
          type: integer
          example: 23

    takeUmbrellaResponseSuccess:
      type: object
      properties: 
        status:
          type: string
          enum: ["ok"]
        payment_mode:
          description: |- 
            `auto` - депозит списан автоматически \
            `manual` - необходимо внести депозит вручную
          type: string
          enum: ["auto", "manual"]
        deposit_amount:
          type: integer
          example: 149
        user_id:
          type: integer
          example: 1234
        station_id:
          type: integer
          example: 23
    
    takeUmbrellaResponseError:
      type: object
      properties: 
        status:
          type: string
          enum: ["error"]
        message:
          type: string
          example: "Unauthorized"
    

    putUmbrellaResponseSuccess:
      type: object
      properties: 
        status:
          type: string
          enum: ["ok"]
        slot:
          description: Ячейка, которая откроется для возврата зонта
          type: integer
          example: 8
        order_id:
          type: integer
          example: 25387
    

    getOrderStatusResponseStationAction:
      type: object
      properties: 
        status:
          type: string
          enum: ["ok"]
        order_status:
          description: |-
            * `station_opened_to_take` - ячейка открыта для взятия зонта
            * `station_opened_to_put` - ячейка открыта для возврата зонт
          type: integer
          enum: ["station_opened_to_take", "station_opened_to_put"]
        slot:
          type: integer
          example: 8
  
    getOrderStatusResponseOtherActions:
      type: object
      properties: 
        status:
          type: string
          enum: ["ok"]
        order_status:
          description: |-
            * `in_the_hands` - зонт взят и находится в распоряжении пользователя
            * `closed_successfully` - зонт возвращен, заказ закрыт
            * `timeout_exceeded` - время взятия зонта истекло
            * `bank_error` - банковская ошибка, платеж не выполнен
            * `unknown` - что-то пошло не так
          type: integer
          enum: ["in_the_hands", "closed_successfully", "timeout_exceeded", "bank_error", "unknown"]
    
    
    ordersFeedbackRequest:
      type: object
      properties: 
        rate:
          type: integer
          enum: [1, 2, 3, 4, 5]
          example: 5
        text:
          description: может быть null
          type: string
          example: "Все было круто!"
    

    getUserInfoResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1234
        phone:
          type: string
          example: '+78005553535'
        name:
          type: string
          example: 'Иван'
        gender:
          description: |- 
            `1` - man \
            `2` - woman
          type: integer
          enum: [1, 2, 0]
        age:
          type: integer
          example: 34
        payment_card_last_four:
          type: integer
          example: 1337
    

    updateUserInfoRequest:
      type: object
      properties: 
        name:
          type: string
          example: "Марина"
        gender:
          description: |-
            `1` - man \
            `2` - woman
          type: integer
          enum: [1, 2, 0]
          example: 2
        age:
          type: integer
          example: 16
    

    activeOrderObject:
      type: object
      properties: 
        id:
          type: integer
          example: 234
        state:
          description: |-
            Статус заказа: \
            `0` - заказ закрыт (обычным способом) \
            `1` - заказ открыт \
            `2` - заказ закрыт, потому что пользователь не взял зонт вовремя \
            `3` - заказ закрыт из-за проблем с оплатой \
            `4` - заказ закрыт из-за внутренней ошибки (например, нет свободных зонтиков)
          type: integer
        datetime_take:
          description: Дата и время взятия зонта
          type: string
          example: "2024-07-19 12:14:23.684691+03"
        station_take:
          description: ID станции, из которой был взят зонт
          type: integer
          example: 23
        slot_take:
          description: Номер ячейки на станции, откуда был взят зонт
          type: integer
          example: 4
        deposit_tx_id:
          description: ID транзакции, в ходе которой был внесен депозит
          type: string
          example: "2482965031"

    orderObject:
      type: object
      properties: 
        id:
          type: integer
          example: 234
        state:
          description: |-
            Статус заказа: \
            `0` - заказ закрыт (обычным способом) \
            `1` - заказ открыт \
            `2` - заказ закрыт, потому что пользователь не взял зонт вовремя \
            `3` - заказ закрыт из-за проблем с оплатой \
            `4` - заказ закрыт из-за внутренней ошибки (например, нет свободных зонтиков)
          type: integer
        datetime_take:
          description: Дата и время взятия зонта
          type: string
          example: "2024-07-19 12:14:23.684691+03"
        datetime_put:
          description: Дата и время возврата зонта
          type: string
          example: "2024-07-19 18:15:20.684691+03"
        station_take:
          description: ID станции, из которой был взят зонт
          type: integer
          example: 23
        station_put:
          description: ID станции, в которую зонт был возвращен
          type: integer
          example: 24
        slot_take:
          description: Номер ячейки на станции, откуда был взят зонт
          type: integer
          example: 4
        slot_put:
          description: Номер ячейки на станции, куда зонт был возвращен
          type: integer
          example: 9
        station_take_address:
          description: Адрес станции, откуда был взят зонт
          type: string
          example: "Москва, ул. Пушкина, дом Колотушкина"
        station_put_address:
          description: Адрес станции, куда был возвращен зонт
          type: string
          example: "Москва, ул. Пушкина, дом 44"


    getActiveOrderResponse: 
      type: object
      properties: 
        status:
          type: string
          enum: ["ok", "error"]
        order:
          $ref: '#/components/schemas/activeOrderObject'
    

    profileGetProcessedOrdersResponse: 
      type: object
      properties: 
        status:
          type: string
          enum: ["ok", "error"]
        orders:
          type: array
          items:
            $ref: '#/components/schemas/orderObject'
    

    getSubscriptionInfoResponse: 
      type: object
      properties: 
        status:
          type: string
          enum: ["ok", "error"]
        subscription:
          type: object
          description: Может отсутствовать, если у пользователя никогда не было подписки (или она закончилась, а потом пользователь вошел и вышел из семьи)
          properties:
            owner:
              type: integer
              example: 111
              description: ID пользователя, оплачивающего подписку (владелец)
            family_members:
              description: Члены семьи. Идентификатор владельца всегда должен быть в списке
              type: array
              items:
                properties:
                  id: 
                    type: integer
                    example: 222
                    description: ID члена семьи
                  phone:
                    type: string
                    example: "+78005553535"
                    description: Номер телефона члена семьи
                  name:
                    type: string
                    example: "Марина"
                    description: Имя члена семьи
            until:
              type: string
              example: "2024-07-19 18:15:20.684691+03"
              description: Дата и время, до которых действует подписка
            is_active:
              type: boolean
              example: true
              description: |-
                `true` - подписка активна \
                `false` - подписка неактивна
    

    subscriptionSendInvitationToFamilyRequest:
      type: object
      properties:
        phone:
          type: string
          example: "+78125730128"
          description: Может содержать пробелы и круглые скобки (но нежелательно)

    subscriptionSendInvitationToFamilyResponseError: 
      type: object
      properties: 
        status:
          type: string
          enum: ["error"]
        code:
          type: string
          enum: ["user_not_found", "user_already_has_subscription", "user_already_in_family", "invitation_already_sent", "family_members_limit_reached", "unauthorized"]
        message:
          type: string
          example: ["User with this phone number does not exist", "User is already has a subscription", "Unauthorized"]

    getSubscriptionInvitationsResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["ok", "error"]
        invitations:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1234
              owner:
                type: integer
                example: 123
              recipient:
                type: object
                properties:
                  id:
                    type: integer
                    example: 321
                  phone:
                    type: string
                    example: "+78002002316"
                  name:
                    type: string
                    example: "Владимир"
    
    getUserSubscriptionInvitationsResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["ok", "error"]
        invitations:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1234
              owner:
                type: object
                properties:
                  id:
                    type: integer
                    example: 321
                  phone:
                    type: string
                    example: "+12024561111"
                    description: Это только пример, на самом деле у нас не будет иностранных номеров
                  name:
                    type: string
                    example: "Дональд"
              recipient:
                type: integer
                example: 321
    
    subscriptionAcceptInvitationToFamilyRequest:
      type: object
      properties:
        invitation_id:
          type: integer
          example: 1234
    

    supportRequest:
      type: object
      properties:
        name:
          type: string
          example: "Иван"
        city:
          type: string
          example: "Москва"
        email:
          type: string
          example: "ivan@yandex.ru"
        phone:
          type: string
          example: "+78005553535"
        text:
          type: string
          example: "Привет, я хочу узнать, как взять зонтик? (да, я не умею читать)"

    installStationRequest:
      type: object
      properties:
        name:
          type: string
          example: "Иван"
        organization:
          type: string
          example: "ООО Рога и копыта"
        city:
          type: string
          example: "Москва"
        email:
          type: string
          example: "ivan@yandex.ru"
        phone:
          type: string
          example: "+78005553535"
        text:
          type: string
          example: "Привет, я хочу установить станцию у себя в офисе"

